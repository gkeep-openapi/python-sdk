# coding: utf-8

"""
    Gkeep API

    Gkeep API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class UpdateNotificationSettingsNotification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alert_1': 'UpdateNotificationSettingsNotificationAlert1',
        'alert_2': 'UpdateNotificationSettingsNotificationAlert2',
        'alert_3': 'UpdateNotificationSettingsNotificationAlert3',
        'alert_4': 'UpdateNotificationSettingsNotificationAlert4',
        'alert_5': 'UpdateNotificationSettingsNotificationAlert4',
        'alert_6': 'UpdateNotificationSettingsNotificationAlert4',
        'alert_8': 'UpdateNotificationSettingsNotificationAlert4',
        'alert_9': 'UpdateNotificationSettingsNotificationAlert9'
    }

    attribute_map = {
        'alert_1': 'alert_1',
        'alert_2': 'alert_2',
        'alert_3': 'alert_3',
        'alert_4': 'alert_4',
        'alert_5': 'alert_5',
        'alert_6': 'alert_6',
        'alert_8': 'alert_8',
        'alert_9': 'alert_9'
    }

    def __init__(self, alert_1=None, alert_2=None, alert_3=None, alert_4=None, alert_5=None, alert_6=None, alert_8=None, alert_9=None):  # noqa: E501
        """UpdateNotificationSettingsNotification - a model defined in Swagger"""  # noqa: E501
        self._alert_1 = None
        self._alert_2 = None
        self._alert_3 = None
        self._alert_4 = None
        self._alert_5 = None
        self._alert_6 = None
        self._alert_8 = None
        self._alert_9 = None
        self.discriminator = None
        if alert_1 is not None:
            self.alert_1 = alert_1
        if alert_2 is not None:
            self.alert_2 = alert_2
        if alert_3 is not None:
            self.alert_3 = alert_3
        if alert_4 is not None:
            self.alert_4 = alert_4
        if alert_5 is not None:
            self.alert_5 = alert_5
        if alert_6 is not None:
            self.alert_6 = alert_6
        if alert_8 is not None:
            self.alert_8 = alert_8
        if alert_9 is not None:
            self.alert_9 = alert_9

    @property
    def alert_1(self):
        """Gets the alert_1 of this UpdateNotificationSettingsNotification.  # noqa: E501


        :return: The alert_1 of this UpdateNotificationSettingsNotification.  # noqa: E501
        :rtype: UpdateNotificationSettingsNotificationAlert1
        """
        return self._alert_1

    @alert_1.setter
    def alert_1(self, alert_1):
        """Sets the alert_1 of this UpdateNotificationSettingsNotification.


        :param alert_1: The alert_1 of this UpdateNotificationSettingsNotification.  # noqa: E501
        :type: UpdateNotificationSettingsNotificationAlert1
        """

        self._alert_1 = alert_1

    @property
    def alert_2(self):
        """Gets the alert_2 of this UpdateNotificationSettingsNotification.  # noqa: E501


        :return: The alert_2 of this UpdateNotificationSettingsNotification.  # noqa: E501
        :rtype: UpdateNotificationSettingsNotificationAlert2
        """
        return self._alert_2

    @alert_2.setter
    def alert_2(self, alert_2):
        """Sets the alert_2 of this UpdateNotificationSettingsNotification.


        :param alert_2: The alert_2 of this UpdateNotificationSettingsNotification.  # noqa: E501
        :type: UpdateNotificationSettingsNotificationAlert2
        """

        self._alert_2 = alert_2

    @property
    def alert_3(self):
        """Gets the alert_3 of this UpdateNotificationSettingsNotification.  # noqa: E501


        :return: The alert_3 of this UpdateNotificationSettingsNotification.  # noqa: E501
        :rtype: UpdateNotificationSettingsNotificationAlert3
        """
        return self._alert_3

    @alert_3.setter
    def alert_3(self, alert_3):
        """Sets the alert_3 of this UpdateNotificationSettingsNotification.


        :param alert_3: The alert_3 of this UpdateNotificationSettingsNotification.  # noqa: E501
        :type: UpdateNotificationSettingsNotificationAlert3
        """

        self._alert_3 = alert_3

    @property
    def alert_4(self):
        """Gets the alert_4 of this UpdateNotificationSettingsNotification.  # noqa: E501


        :return: The alert_4 of this UpdateNotificationSettingsNotification.  # noqa: E501
        :rtype: UpdateNotificationSettingsNotificationAlert4
        """
        return self._alert_4

    @alert_4.setter
    def alert_4(self, alert_4):
        """Sets the alert_4 of this UpdateNotificationSettingsNotification.


        :param alert_4: The alert_4 of this UpdateNotificationSettingsNotification.  # noqa: E501
        :type: UpdateNotificationSettingsNotificationAlert4
        """

        self._alert_4 = alert_4

    @property
    def alert_5(self):
        """Gets the alert_5 of this UpdateNotificationSettingsNotification.  # noqa: E501


        :return: The alert_5 of this UpdateNotificationSettingsNotification.  # noqa: E501
        :rtype: UpdateNotificationSettingsNotificationAlert4
        """
        return self._alert_5

    @alert_5.setter
    def alert_5(self, alert_5):
        """Sets the alert_5 of this UpdateNotificationSettingsNotification.


        :param alert_5: The alert_5 of this UpdateNotificationSettingsNotification.  # noqa: E501
        :type: UpdateNotificationSettingsNotificationAlert4
        """

        self._alert_5 = alert_5

    @property
    def alert_6(self):
        """Gets the alert_6 of this UpdateNotificationSettingsNotification.  # noqa: E501


        :return: The alert_6 of this UpdateNotificationSettingsNotification.  # noqa: E501
        :rtype: UpdateNotificationSettingsNotificationAlert4
        """
        return self._alert_6

    @alert_6.setter
    def alert_6(self, alert_6):
        """Sets the alert_6 of this UpdateNotificationSettingsNotification.


        :param alert_6: The alert_6 of this UpdateNotificationSettingsNotification.  # noqa: E501
        :type: UpdateNotificationSettingsNotificationAlert4
        """

        self._alert_6 = alert_6

    @property
    def alert_8(self):
        """Gets the alert_8 of this UpdateNotificationSettingsNotification.  # noqa: E501


        :return: The alert_8 of this UpdateNotificationSettingsNotification.  # noqa: E501
        :rtype: UpdateNotificationSettingsNotificationAlert4
        """
        return self._alert_8

    @alert_8.setter
    def alert_8(self, alert_8):
        """Sets the alert_8 of this UpdateNotificationSettingsNotification.


        :param alert_8: The alert_8 of this UpdateNotificationSettingsNotification.  # noqa: E501
        :type: UpdateNotificationSettingsNotificationAlert4
        """

        self._alert_8 = alert_8

    @property
    def alert_9(self):
        """Gets the alert_9 of this UpdateNotificationSettingsNotification.  # noqa: E501


        :return: The alert_9 of this UpdateNotificationSettingsNotification.  # noqa: E501
        :rtype: UpdateNotificationSettingsNotificationAlert9
        """
        return self._alert_9

    @alert_9.setter
    def alert_9(self, alert_9):
        """Sets the alert_9 of this UpdateNotificationSettingsNotification.


        :param alert_9: The alert_9 of this UpdateNotificationSettingsNotification.  # noqa: E501
        :type: UpdateNotificationSettingsNotificationAlert9
        """

        self._alert_9 = alert_9

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateNotificationSettingsNotification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateNotificationSettingsNotification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
