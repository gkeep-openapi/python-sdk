# coding: utf-8

"""
    Gkeep API

    Gkeep API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Vehicle(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'photo_path': 'str',
        'total_day_off': 'int',
        'id': 'int',
        'brand': 'VehicleBrand',
        'model': 'VehicleModel',
        'version': 'VehicleVersion',
        'comment': 'str',
        'country': 'VehicleCountry',
        'owner': 'VehicleOwner',
        'driver': 'VehicleDriver',
        'groups': 'list[Object]',
        'initial_consumption': 'float',
        'name': 'str',
        'nav_system_object_uid': 'str',
        'photo': 'str',
        'registration': 'str',
        'release_year': 'int',
        'type': 'VehicleCategoryType',
        'technical': 'VehicleTechnical',
        'nav_system': 'VehicleNavSystem',
        'sensor': 'VehicleSensor',
        'tanks': 'list[VehicleTanks]',
        'tank_position': 'VehicleTankPosition',
        'is_maintenance_enabled': 'bool',
        'category': 'VehicleCategory',
        'ptac': 'str',
        'eligible_for_ticpe': 'str',
        'eligible_for_tsvr': 'str',
        'national_type': 'str',
        'fuel_type': 'str',
        '_property': 'str',
        'box_id': 'str'
    }

    attribute_map = {
        'photo_path': 'photo_path',
        'total_day_off': 'total_day_off',
        'id': 'id',
        'brand': 'brand',
        'model': 'model',
        'version': 'version',
        'comment': 'comment',
        'country': 'country',
        'owner': 'owner',
        'driver': 'driver',
        'groups': 'groups',
        'initial_consumption': 'initial_consumption',
        'name': 'name',
        'nav_system_object_uid': 'nav_system_object_uid',
        'photo': 'photo',
        'registration': 'registration',
        'release_year': 'release_year',
        'type': 'type',
        'technical': 'technical',
        'nav_system': 'nav_system',
        'sensor': 'sensor',
        'tanks': 'tanks',
        'tank_position': 'tank_position',
        'is_maintenance_enabled': 'is_maintenance_enabled',
        'category': 'category',
        'ptac': 'ptac',
        'eligible_for_ticpe': 'eligible_for_ticpe',
        'eligible_for_tsvr': 'eligible_for_tsvr',
        'national_type': 'national_type',
        'fuel_type': 'fuel_type',
        '_property': 'property',
        'box_id': 'box_id'
    }

    def __init__(self, photo_path=None, total_day_off=None, id=None, brand=None, model=None, version=None, comment=None, country=None, owner=None, driver=None, groups=None, initial_consumption=None, name=None, nav_system_object_uid=None, photo=None, registration=None, release_year=None, type=None, technical=None, nav_system=None, sensor=None, tanks=None, tank_position=None, is_maintenance_enabled=None, category=None, ptac=None, eligible_for_ticpe=None, eligible_for_tsvr=None, national_type=None, fuel_type=None, _property=None, box_id=None):  # noqa: E501
        """Vehicle - a model defined in Swagger"""  # noqa: E501
        self._photo_path = None
        self._total_day_off = None
        self._id = None
        self._brand = None
        self._model = None
        self._version = None
        self._comment = None
        self._country = None
        self._owner = None
        self._driver = None
        self._groups = None
        self._initial_consumption = None
        self._name = None
        self._nav_system_object_uid = None
        self._photo = None
        self._registration = None
        self._release_year = None
        self._type = None
        self._technical = None
        self._nav_system = None
        self._sensor = None
        self._tanks = None
        self._tank_position = None
        self._is_maintenance_enabled = None
        self._category = None
        self._ptac = None
        self._eligible_for_ticpe = None
        self._eligible_for_tsvr = None
        self._national_type = None
        self._fuel_type = None
        self.__property = None
        self._box_id = None
        self.discriminator = None
        if photo_path is not None:
            self.photo_path = photo_path
        if total_day_off is not None:
            self.total_day_off = total_day_off
        if id is not None:
            self.id = id
        if brand is not None:
            self.brand = brand
        if model is not None:
            self.model = model
        if version is not None:
            self.version = version
        if comment is not None:
            self.comment = comment
        if country is not None:
            self.country = country
        if owner is not None:
            self.owner = owner
        if driver is not None:
            self.driver = driver
        if groups is not None:
            self.groups = groups
        if initial_consumption is not None:
            self.initial_consumption = initial_consumption
        if name is not None:
            self.name = name
        if nav_system_object_uid is not None:
            self.nav_system_object_uid = nav_system_object_uid
        if photo is not None:
            self.photo = photo
        if registration is not None:
            self.registration = registration
        if release_year is not None:
            self.release_year = release_year
        if type is not None:
            self.type = type
        if technical is not None:
            self.technical = technical
        if nav_system is not None:
            self.nav_system = nav_system
        if sensor is not None:
            self.sensor = sensor
        if tanks is not None:
            self.tanks = tanks
        if tank_position is not None:
            self.tank_position = tank_position
        if is_maintenance_enabled is not None:
            self.is_maintenance_enabled = is_maintenance_enabled
        if category is not None:
            self.category = category
        if ptac is not None:
            self.ptac = ptac
        if eligible_for_ticpe is not None:
            self.eligible_for_ticpe = eligible_for_ticpe
        if eligible_for_tsvr is not None:
            self.eligible_for_tsvr = eligible_for_tsvr
        if national_type is not None:
            self.national_type = national_type
        if fuel_type is not None:
            self.fuel_type = fuel_type
        if _property is not None:
            self._property = _property
        if box_id is not None:
            self.box_id = box_id

    @property
    def photo_path(self):
        """Gets the photo_path of this Vehicle.  # noqa: E501


        :return: The photo_path of this Vehicle.  # noqa: E501
        :rtype: str
        """
        return self._photo_path

    @photo_path.setter
    def photo_path(self, photo_path):
        """Sets the photo_path of this Vehicle.


        :param photo_path: The photo_path of this Vehicle.  # noqa: E501
        :type: str
        """

        self._photo_path = photo_path

    @property
    def total_day_off(self):
        """Gets the total_day_off of this Vehicle.  # noqa: E501


        :return: The total_day_off of this Vehicle.  # noqa: E501
        :rtype: int
        """
        return self._total_day_off

    @total_day_off.setter
    def total_day_off(self, total_day_off):
        """Sets the total_day_off of this Vehicle.


        :param total_day_off: The total_day_off of this Vehicle.  # noqa: E501
        :type: int
        """

        self._total_day_off = total_day_off

    @property
    def id(self):
        """Gets the id of this Vehicle.  # noqa: E501


        :return: The id of this Vehicle.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Vehicle.


        :param id: The id of this Vehicle.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def brand(self):
        """Gets the brand of this Vehicle.  # noqa: E501


        :return: The brand of this Vehicle.  # noqa: E501
        :rtype: VehicleBrand
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this Vehicle.


        :param brand: The brand of this Vehicle.  # noqa: E501
        :type: VehicleBrand
        """

        self._brand = brand

    @property
    def model(self):
        """Gets the model of this Vehicle.  # noqa: E501


        :return: The model of this Vehicle.  # noqa: E501
        :rtype: VehicleModel
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this Vehicle.


        :param model: The model of this Vehicle.  # noqa: E501
        :type: VehicleModel
        """

        self._model = model

    @property
    def version(self):
        """Gets the version of this Vehicle.  # noqa: E501


        :return: The version of this Vehicle.  # noqa: E501
        :rtype: VehicleVersion
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Vehicle.


        :param version: The version of this Vehicle.  # noqa: E501
        :type: VehicleVersion
        """

        self._version = version

    @property
    def comment(self):
        """Gets the comment of this Vehicle.  # noqa: E501


        :return: The comment of this Vehicle.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Vehicle.


        :param comment: The comment of this Vehicle.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def country(self):
        """Gets the country of this Vehicle.  # noqa: E501


        :return: The country of this Vehicle.  # noqa: E501
        :rtype: VehicleCountry
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Vehicle.


        :param country: The country of this Vehicle.  # noqa: E501
        :type: VehicleCountry
        """

        self._country = country

    @property
    def owner(self):
        """Gets the owner of this Vehicle.  # noqa: E501


        :return: The owner of this Vehicle.  # noqa: E501
        :rtype: VehicleOwner
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Vehicle.


        :param owner: The owner of this Vehicle.  # noqa: E501
        :type: VehicleOwner
        """

        self._owner = owner

    @property
    def driver(self):
        """Gets the driver of this Vehicle.  # noqa: E501


        :return: The driver of this Vehicle.  # noqa: E501
        :rtype: VehicleDriver
        """
        return self._driver

    @driver.setter
    def driver(self, driver):
        """Sets the driver of this Vehicle.


        :param driver: The driver of this Vehicle.  # noqa: E501
        :type: VehicleDriver
        """

        self._driver = driver

    @property
    def groups(self):
        """Gets the groups of this Vehicle.  # noqa: E501


        :return: The groups of this Vehicle.  # noqa: E501
        :rtype: list[Object]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this Vehicle.


        :param groups: The groups of this Vehicle.  # noqa: E501
        :type: list[Object]
        """

        self._groups = groups

    @property
    def initial_consumption(self):
        """Gets the initial_consumption of this Vehicle.  # noqa: E501


        :return: The initial_consumption of this Vehicle.  # noqa: E501
        :rtype: float
        """
        return self._initial_consumption

    @initial_consumption.setter
    def initial_consumption(self, initial_consumption):
        """Sets the initial_consumption of this Vehicle.


        :param initial_consumption: The initial_consumption of this Vehicle.  # noqa: E501
        :type: float
        """

        self._initial_consumption = initial_consumption

    @property
    def name(self):
        """Gets the name of this Vehicle.  # noqa: E501


        :return: The name of this Vehicle.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Vehicle.


        :param name: The name of this Vehicle.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def nav_system_object_uid(self):
        """Gets the nav_system_object_uid of this Vehicle.  # noqa: E501


        :return: The nav_system_object_uid of this Vehicle.  # noqa: E501
        :rtype: str
        """
        return self._nav_system_object_uid

    @nav_system_object_uid.setter
    def nav_system_object_uid(self, nav_system_object_uid):
        """Sets the nav_system_object_uid of this Vehicle.


        :param nav_system_object_uid: The nav_system_object_uid of this Vehicle.  # noqa: E501
        :type: str
        """

        self._nav_system_object_uid = nav_system_object_uid

    @property
    def photo(self):
        """Gets the photo of this Vehicle.  # noqa: E501


        :return: The photo of this Vehicle.  # noqa: E501
        :rtype: str
        """
        return self._photo

    @photo.setter
    def photo(self, photo):
        """Sets the photo of this Vehicle.


        :param photo: The photo of this Vehicle.  # noqa: E501
        :type: str
        """

        self._photo = photo

    @property
    def registration(self):
        """Gets the registration of this Vehicle.  # noqa: E501


        :return: The registration of this Vehicle.  # noqa: E501
        :rtype: str
        """
        return self._registration

    @registration.setter
    def registration(self, registration):
        """Sets the registration of this Vehicle.


        :param registration: The registration of this Vehicle.  # noqa: E501
        :type: str
        """

        self._registration = registration

    @property
    def release_year(self):
        """Gets the release_year of this Vehicle.  # noqa: E501


        :return: The release_year of this Vehicle.  # noqa: E501
        :rtype: int
        """
        return self._release_year

    @release_year.setter
    def release_year(self, release_year):
        """Sets the release_year of this Vehicle.


        :param release_year: The release_year of this Vehicle.  # noqa: E501
        :type: int
        """

        self._release_year = release_year

    @property
    def type(self):
        """Gets the type of this Vehicle.  # noqa: E501


        :return: The type of this Vehicle.  # noqa: E501
        :rtype: VehicleCategoryType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Vehicle.


        :param type: The type of this Vehicle.  # noqa: E501
        :type: VehicleCategoryType
        """

        self._type = type

    @property
    def technical(self):
        """Gets the technical of this Vehicle.  # noqa: E501


        :return: The technical of this Vehicle.  # noqa: E501
        :rtype: VehicleTechnical
        """
        return self._technical

    @technical.setter
    def technical(self, technical):
        """Sets the technical of this Vehicle.


        :param technical: The technical of this Vehicle.  # noqa: E501
        :type: VehicleTechnical
        """

        self._technical = technical

    @property
    def nav_system(self):
        """Gets the nav_system of this Vehicle.  # noqa: E501


        :return: The nav_system of this Vehicle.  # noqa: E501
        :rtype: VehicleNavSystem
        """
        return self._nav_system

    @nav_system.setter
    def nav_system(self, nav_system):
        """Sets the nav_system of this Vehicle.


        :param nav_system: The nav_system of this Vehicle.  # noqa: E501
        :type: VehicleNavSystem
        """

        self._nav_system = nav_system

    @property
    def sensor(self):
        """Gets the sensor of this Vehicle.  # noqa: E501


        :return: The sensor of this Vehicle.  # noqa: E501
        :rtype: VehicleSensor
        """
        return self._sensor

    @sensor.setter
    def sensor(self, sensor):
        """Sets the sensor of this Vehicle.


        :param sensor: The sensor of this Vehicle.  # noqa: E501
        :type: VehicleSensor
        """

        self._sensor = sensor

    @property
    def tanks(self):
        """Gets the tanks of this Vehicle.  # noqa: E501


        :return: The tanks of this Vehicle.  # noqa: E501
        :rtype: list[VehicleTanks]
        """
        return self._tanks

    @tanks.setter
    def tanks(self, tanks):
        """Sets the tanks of this Vehicle.


        :param tanks: The tanks of this Vehicle.  # noqa: E501
        :type: list[VehicleTanks]
        """

        self._tanks = tanks

    @property
    def tank_position(self):
        """Gets the tank_position of this Vehicle.  # noqa: E501


        :return: The tank_position of this Vehicle.  # noqa: E501
        :rtype: VehicleTankPosition
        """
        return self._tank_position

    @tank_position.setter
    def tank_position(self, tank_position):
        """Sets the tank_position of this Vehicle.


        :param tank_position: The tank_position of this Vehicle.  # noqa: E501
        :type: VehicleTankPosition
        """

        self._tank_position = tank_position

    @property
    def is_maintenance_enabled(self):
        """Gets the is_maintenance_enabled of this Vehicle.  # noqa: E501


        :return: The is_maintenance_enabled of this Vehicle.  # noqa: E501
        :rtype: bool
        """
        return self._is_maintenance_enabled

    @is_maintenance_enabled.setter
    def is_maintenance_enabled(self, is_maintenance_enabled):
        """Sets the is_maintenance_enabled of this Vehicle.


        :param is_maintenance_enabled: The is_maintenance_enabled of this Vehicle.  # noqa: E501
        :type: bool
        """

        self._is_maintenance_enabled = is_maintenance_enabled

    @property
    def category(self):
        """Gets the category of this Vehicle.  # noqa: E501


        :return: The category of this Vehicle.  # noqa: E501
        :rtype: VehicleCategory
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Vehicle.


        :param category: The category of this Vehicle.  # noqa: E501
        :type: VehicleCategory
        """

        self._category = category

    @property
    def ptac(self):
        """Gets the ptac of this Vehicle.  # noqa: E501


        :return: The ptac of this Vehicle.  # noqa: E501
        :rtype: str
        """
        return self._ptac

    @ptac.setter
    def ptac(self, ptac):
        """Sets the ptac of this Vehicle.


        :param ptac: The ptac of this Vehicle.  # noqa: E501
        :type: str
        """

        self._ptac = ptac

    @property
    def eligible_for_ticpe(self):
        """Gets the eligible_for_ticpe of this Vehicle.  # noqa: E501


        :return: The eligible_for_ticpe of this Vehicle.  # noqa: E501
        :rtype: str
        """
        return self._eligible_for_ticpe

    @eligible_for_ticpe.setter
    def eligible_for_ticpe(self, eligible_for_ticpe):
        """Sets the eligible_for_ticpe of this Vehicle.


        :param eligible_for_ticpe: The eligible_for_ticpe of this Vehicle.  # noqa: E501
        :type: str
        """

        self._eligible_for_ticpe = eligible_for_ticpe

    @property
    def eligible_for_tsvr(self):
        """Gets the eligible_for_tsvr of this Vehicle.  # noqa: E501


        :return: The eligible_for_tsvr of this Vehicle.  # noqa: E501
        :rtype: str
        """
        return self._eligible_for_tsvr

    @eligible_for_tsvr.setter
    def eligible_for_tsvr(self, eligible_for_tsvr):
        """Sets the eligible_for_tsvr of this Vehicle.


        :param eligible_for_tsvr: The eligible_for_tsvr of this Vehicle.  # noqa: E501
        :type: str
        """

        self._eligible_for_tsvr = eligible_for_tsvr

    @property
    def national_type(self):
        """Gets the national_type of this Vehicle.  # noqa: E501


        :return: The national_type of this Vehicle.  # noqa: E501
        :rtype: str
        """
        return self._national_type

    @national_type.setter
    def national_type(self, national_type):
        """Sets the national_type of this Vehicle.


        :param national_type: The national_type of this Vehicle.  # noqa: E501
        :type: str
        """

        self._national_type = national_type

    @property
    def fuel_type(self):
        """Gets the fuel_type of this Vehicle.  # noqa: E501


        :return: The fuel_type of this Vehicle.  # noqa: E501
        :rtype: str
        """
        return self._fuel_type

    @fuel_type.setter
    def fuel_type(self, fuel_type):
        """Sets the fuel_type of this Vehicle.


        :param fuel_type: The fuel_type of this Vehicle.  # noqa: E501
        :type: str
        """

        self._fuel_type = fuel_type

    @property
    def _property(self):
        """Gets the _property of this Vehicle.  # noqa: E501


        :return: The _property of this Vehicle.  # noqa: E501
        :rtype: str
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this Vehicle.


        :param _property: The _property of this Vehicle.  # noqa: E501
        :type: str
        """

        self.__property = _property

    @property
    def box_id(self):
        """Gets the box_id of this Vehicle.  # noqa: E501


        :return: The box_id of this Vehicle.  # noqa: E501
        :rtype: str
        """
        return self._box_id

    @box_id.setter
    def box_id(self, box_id):
        """Sets the box_id of this Vehicle.


        :param box_id: The box_id of this Vehicle.  # noqa: E501
        :type: str
        """

        self._box_id = box_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Vehicle, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Vehicle):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
