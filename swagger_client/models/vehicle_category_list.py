# coding: utf-8

"""
    Gkeep API

    Gkeep API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class VehicleCategoryList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'list': 'list[VehicleCategoryListList]',
        'count': 'int',
        'count_per_page': 'int',
        'page_count': 'int'
    }

    attribute_map = {
        'list': 'list',
        'count': 'count',
        'count_per_page': 'count_per_page',
        'page_count': 'page_count'
    }

    def __init__(self, list=None, count=None, count_per_page=None, page_count=None):  # noqa: E501
        """VehicleCategoryList - a model defined in Swagger"""  # noqa: E501
        self._list = None
        self._count = None
        self._count_per_page = None
        self._page_count = None
        self.discriminator = None
        if list is not None:
            self.list = list
        if count is not None:
            self.count = count
        if count_per_page is not None:
            self.count_per_page = count_per_page
        if page_count is not None:
            self.page_count = page_count

    @property
    def list(self):
        """Gets the list of this VehicleCategoryList.  # noqa: E501


        :return: The list of this VehicleCategoryList.  # noqa: E501
        :rtype: list[VehicleCategoryListList]
        """
        return self._list

    @list.setter
    def list(self, list):
        """Sets the list of this VehicleCategoryList.


        :param list: The list of this VehicleCategoryList.  # noqa: E501
        :type: list[VehicleCategoryListList]
        """

        self._list = list

    @property
    def count(self):
        """Gets the count of this VehicleCategoryList.  # noqa: E501


        :return: The count of this VehicleCategoryList.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this VehicleCategoryList.


        :param count: The count of this VehicleCategoryList.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def count_per_page(self):
        """Gets the count_per_page of this VehicleCategoryList.  # noqa: E501


        :return: The count_per_page of this VehicleCategoryList.  # noqa: E501
        :rtype: int
        """
        return self._count_per_page

    @count_per_page.setter
    def count_per_page(self, count_per_page):
        """Sets the count_per_page of this VehicleCategoryList.


        :param count_per_page: The count_per_page of this VehicleCategoryList.  # noqa: E501
        :type: int
        """

        self._count_per_page = count_per_page

    @property
    def page_count(self):
        """Gets the page_count of this VehicleCategoryList.  # noqa: E501


        :return: The page_count of this VehicleCategoryList.  # noqa: E501
        :rtype: int
        """
        return self._page_count

    @page_count.setter
    def page_count(self, page_count):
        """Sets the page_count of this VehicleCategoryList.


        :param page_count: The page_count of this VehicleCategoryList.  # noqa: E501
        :type: int
        """

        self._page_count = page_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VehicleCategoryList, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VehicleCategoryList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
