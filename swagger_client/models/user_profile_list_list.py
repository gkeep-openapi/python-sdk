# coding: utf-8

"""
    Gkeep API

    Gkeep API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class UserProfileListList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'str',
        'groups': 'list[UserProfileListGroups]',
        'locked': 'bool',
        'firstname': 'str',
        'lastname': 'str',
        'phone': 'str',
        'parent_id': 'int',
        'company': 'str',
        'id': 'int',
        'lang': 'UserProfileLang',
        'geo_localization_settings': 'UserProfileListGeoLocalizationSettings'
    }

    attribute_map = {
        'email': 'email',
        'groups': 'groups',
        'locked': 'locked',
        'firstname': 'firstname',
        'lastname': 'lastname',
        'phone': 'phone',
        'parent_id': 'parent_id',
        'company': 'company',
        'id': 'id',
        'lang': 'lang',
        'geo_localization_settings': 'geo_localization_settings'
    }

    def __init__(self, email=None, groups=None, locked=None, firstname=None, lastname=None, phone=None, parent_id=None, company=None, id=None, lang=None, geo_localization_settings=None):  # noqa: E501
        """UserProfileListList - a model defined in Swagger"""  # noqa: E501
        self._email = None
        self._groups = None
        self._locked = None
        self._firstname = None
        self._lastname = None
        self._phone = None
        self._parent_id = None
        self._company = None
        self._id = None
        self._lang = None
        self._geo_localization_settings = None
        self.discriminator = None
        if email is not None:
            self.email = email
        if groups is not None:
            self.groups = groups
        if locked is not None:
            self.locked = locked
        if firstname is not None:
            self.firstname = firstname
        if lastname is not None:
            self.lastname = lastname
        if phone is not None:
            self.phone = phone
        if parent_id is not None:
            self.parent_id = parent_id
        if company is not None:
            self.company = company
        if id is not None:
            self.id = id
        if lang is not None:
            self.lang = lang
        if geo_localization_settings is not None:
            self.geo_localization_settings = geo_localization_settings

    @property
    def email(self):
        """Gets the email of this UserProfileListList.  # noqa: E501


        :return: The email of this UserProfileListList.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserProfileListList.


        :param email: The email of this UserProfileListList.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def groups(self):
        """Gets the groups of this UserProfileListList.  # noqa: E501


        :return: The groups of this UserProfileListList.  # noqa: E501
        :rtype: list[UserProfileListGroups]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this UserProfileListList.


        :param groups: The groups of this UserProfileListList.  # noqa: E501
        :type: list[UserProfileListGroups]
        """

        self._groups = groups

    @property
    def locked(self):
        """Gets the locked of this UserProfileListList.  # noqa: E501


        :return: The locked of this UserProfileListList.  # noqa: E501
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this UserProfileListList.


        :param locked: The locked of this UserProfileListList.  # noqa: E501
        :type: bool
        """

        self._locked = locked

    @property
    def firstname(self):
        """Gets the firstname of this UserProfileListList.  # noqa: E501


        :return: The firstname of this UserProfileListList.  # noqa: E501
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this UserProfileListList.


        :param firstname: The firstname of this UserProfileListList.  # noqa: E501
        :type: str
        """

        self._firstname = firstname

    @property
    def lastname(self):
        """Gets the lastname of this UserProfileListList.  # noqa: E501


        :return: The lastname of this UserProfileListList.  # noqa: E501
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this UserProfileListList.


        :param lastname: The lastname of this UserProfileListList.  # noqa: E501
        :type: str
        """

        self._lastname = lastname

    @property
    def phone(self):
        """Gets the phone of this UserProfileListList.  # noqa: E501


        :return: The phone of this UserProfileListList.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this UserProfileListList.


        :param phone: The phone of this UserProfileListList.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def parent_id(self):
        """Gets the parent_id of this UserProfileListList.  # noqa: E501


        :return: The parent_id of this UserProfileListList.  # noqa: E501
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this UserProfileListList.


        :param parent_id: The parent_id of this UserProfileListList.  # noqa: E501
        :type: int
        """

        self._parent_id = parent_id

    @property
    def company(self):
        """Gets the company of this UserProfileListList.  # noqa: E501


        :return: The company of this UserProfileListList.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this UserProfileListList.


        :param company: The company of this UserProfileListList.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def id(self):
        """Gets the id of this UserProfileListList.  # noqa: E501


        :return: The id of this UserProfileListList.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserProfileListList.


        :param id: The id of this UserProfileListList.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def lang(self):
        """Gets the lang of this UserProfileListList.  # noqa: E501


        :return: The lang of this UserProfileListList.  # noqa: E501
        :rtype: UserProfileLang
        """
        return self._lang

    @lang.setter
    def lang(self, lang):
        """Sets the lang of this UserProfileListList.


        :param lang: The lang of this UserProfileListList.  # noqa: E501
        :type: UserProfileLang
        """

        self._lang = lang

    @property
    def geo_localization_settings(self):
        """Gets the geo_localization_settings of this UserProfileListList.  # noqa: E501


        :return: The geo_localization_settings of this UserProfileListList.  # noqa: E501
        :rtype: UserProfileListGeoLocalizationSettings
        """
        return self._geo_localization_settings

    @geo_localization_settings.setter
    def geo_localization_settings(self, geo_localization_settings):
        """Sets the geo_localization_settings of this UserProfileListList.


        :param geo_localization_settings: The geo_localization_settings of this UserProfileListList.  # noqa: E501
        :type: UserProfileListGeoLocalizationSettings
        """

        self._geo_localization_settings = geo_localization_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserProfileListList, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserProfileListList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
