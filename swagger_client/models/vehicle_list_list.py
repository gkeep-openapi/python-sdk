# coding: utf-8

"""
    Gkeep API

    Gkeep API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class VehicleListList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'gkeep_id': 'str',
        'id': 'int',
        'owner': 'AlertListVehicleOwner',
        'driver': 'AlertListDriver',
        'groups': 'list[VehicleListGroups]',
        'name': 'str',
        'photo': 'str',
        'sensor': 'VehicleListSensor',
        'last_alert_at': 'int',
        'first_frame_at': 'int',
        'is_maintenance_enabled': 'bool'
    }

    attribute_map = {
        'gkeep_id': 'gkeep_id',
        'id': 'id',
        'owner': 'owner',
        'driver': 'driver',
        'groups': 'groups',
        'name': 'name',
        'photo': 'photo',
        'sensor': 'sensor',
        'last_alert_at': 'last_alert_at',
        'first_frame_at': 'first_frame_at',
        'is_maintenance_enabled': 'is_maintenance_enabled'
    }

    def __init__(self, gkeep_id=None, id=None, owner=None, driver=None, groups=None, name=None, photo=None, sensor=None, last_alert_at=None, first_frame_at=None, is_maintenance_enabled=None):  # noqa: E501
        """VehicleListList - a model defined in Swagger"""  # noqa: E501
        self._gkeep_id = None
        self._id = None
        self._owner = None
        self._driver = None
        self._groups = None
        self._name = None
        self._photo = None
        self._sensor = None
        self._last_alert_at = None
        self._first_frame_at = None
        self._is_maintenance_enabled = None
        self.discriminator = None
        if gkeep_id is not None:
            self.gkeep_id = gkeep_id
        if id is not None:
            self.id = id
        if owner is not None:
            self.owner = owner
        if driver is not None:
            self.driver = driver
        if groups is not None:
            self.groups = groups
        if name is not None:
            self.name = name
        if photo is not None:
            self.photo = photo
        if sensor is not None:
            self.sensor = sensor
        if last_alert_at is not None:
            self.last_alert_at = last_alert_at
        if first_frame_at is not None:
            self.first_frame_at = first_frame_at
        if is_maintenance_enabled is not None:
            self.is_maintenance_enabled = is_maintenance_enabled

    @property
    def gkeep_id(self):
        """Gets the gkeep_id of this VehicleListList.  # noqa: E501


        :return: The gkeep_id of this VehicleListList.  # noqa: E501
        :rtype: str
        """
        return self._gkeep_id

    @gkeep_id.setter
    def gkeep_id(self, gkeep_id):
        """Sets the gkeep_id of this VehicleListList.


        :param gkeep_id: The gkeep_id of this VehicleListList.  # noqa: E501
        :type: str
        """

        self._gkeep_id = gkeep_id

    @property
    def id(self):
        """Gets the id of this VehicleListList.  # noqa: E501


        :return: The id of this VehicleListList.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VehicleListList.


        :param id: The id of this VehicleListList.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def owner(self):
        """Gets the owner of this VehicleListList.  # noqa: E501


        :return: The owner of this VehicleListList.  # noqa: E501
        :rtype: AlertListVehicleOwner
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this VehicleListList.


        :param owner: The owner of this VehicleListList.  # noqa: E501
        :type: AlertListVehicleOwner
        """

        self._owner = owner

    @property
    def driver(self):
        """Gets the driver of this VehicleListList.  # noqa: E501


        :return: The driver of this VehicleListList.  # noqa: E501
        :rtype: AlertListDriver
        """
        return self._driver

    @driver.setter
    def driver(self, driver):
        """Sets the driver of this VehicleListList.


        :param driver: The driver of this VehicleListList.  # noqa: E501
        :type: AlertListDriver
        """

        self._driver = driver

    @property
    def groups(self):
        """Gets the groups of this VehicleListList.  # noqa: E501


        :return: The groups of this VehicleListList.  # noqa: E501
        :rtype: list[VehicleListGroups]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this VehicleListList.


        :param groups: The groups of this VehicleListList.  # noqa: E501
        :type: list[VehicleListGroups]
        """

        self._groups = groups

    @property
    def name(self):
        """Gets the name of this VehicleListList.  # noqa: E501


        :return: The name of this VehicleListList.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VehicleListList.


        :param name: The name of this VehicleListList.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def photo(self):
        """Gets the photo of this VehicleListList.  # noqa: E501


        :return: The photo of this VehicleListList.  # noqa: E501
        :rtype: str
        """
        return self._photo

    @photo.setter
    def photo(self, photo):
        """Sets the photo of this VehicleListList.


        :param photo: The photo of this VehicleListList.  # noqa: E501
        :type: str
        """

        self._photo = photo

    @property
    def sensor(self):
        """Gets the sensor of this VehicleListList.  # noqa: E501


        :return: The sensor of this VehicleListList.  # noqa: E501
        :rtype: VehicleListSensor
        """
        return self._sensor

    @sensor.setter
    def sensor(self, sensor):
        """Sets the sensor of this VehicleListList.


        :param sensor: The sensor of this VehicleListList.  # noqa: E501
        :type: VehicleListSensor
        """

        self._sensor = sensor

    @property
    def last_alert_at(self):
        """Gets the last_alert_at of this VehicleListList.  # noqa: E501


        :return: The last_alert_at of this VehicleListList.  # noqa: E501
        :rtype: int
        """
        return self._last_alert_at

    @last_alert_at.setter
    def last_alert_at(self, last_alert_at):
        """Sets the last_alert_at of this VehicleListList.


        :param last_alert_at: The last_alert_at of this VehicleListList.  # noqa: E501
        :type: int
        """

        self._last_alert_at = last_alert_at

    @property
    def first_frame_at(self):
        """Gets the first_frame_at of this VehicleListList.  # noqa: E501


        :return: The first_frame_at of this VehicleListList.  # noqa: E501
        :rtype: int
        """
        return self._first_frame_at

    @first_frame_at.setter
    def first_frame_at(self, first_frame_at):
        """Sets the first_frame_at of this VehicleListList.


        :param first_frame_at: The first_frame_at of this VehicleListList.  # noqa: E501
        :type: int
        """

        self._first_frame_at = first_frame_at

    @property
    def is_maintenance_enabled(self):
        """Gets the is_maintenance_enabled of this VehicleListList.  # noqa: E501


        :return: The is_maintenance_enabled of this VehicleListList.  # noqa: E501
        :rtype: bool
        """
        return self._is_maintenance_enabled

    @is_maintenance_enabled.setter
    def is_maintenance_enabled(self, is_maintenance_enabled):
        """Sets the is_maintenance_enabled of this VehicleListList.


        :param is_maintenance_enabled: The is_maintenance_enabled of this VehicleListList.  # noqa: E501
        :type: bool
        """

        self._is_maintenance_enabled = is_maintenance_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VehicleListList, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VehicleListList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
