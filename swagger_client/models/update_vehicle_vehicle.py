# coding: utf-8

"""
    Gkeep API

    Gkeep API  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class UpdateVehicleVehicle(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'nav_system_object_uid': 'str',
        'release_year': 'int',
        'registration': 'str',
        'type': 'int',
        'brand': 'int',
        'version': 'int',
        'model': 'int',
        'category': 'int',
        'initial_consumption': 'float',
        'country': 'int',
        'nav_system': 'int',
        'tanks': 'list[UpdateVehicleVehicleTanks]',
        'tank_position': 'int',
        'technical': 'int'
    }

    attribute_map = {
        'name': 'name',
        'nav_system_object_uid': 'nav_system_object_uid',
        'release_year': 'release_year',
        'registration': 'registration',
        'type': 'type',
        'brand': 'brand',
        'version': 'version',
        'model': 'model',
        'category': 'category',
        'initial_consumption': 'initial_consumption',
        'country': 'country',
        'nav_system': 'nav_system',
        'tanks': 'tanks',
        'tank_position': 'tank_position',
        'technical': 'technical'
    }

    def __init__(self, name=None, nav_system_object_uid=None, release_year=None, registration=None, type=None, brand=None, version=None, model=None, category=None, initial_consumption=None, country=None, nav_system=None, tanks=None, tank_position=None, technical=None):  # noqa: E501
        """UpdateVehicleVehicle - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._nav_system_object_uid = None
        self._release_year = None
        self._registration = None
        self._type = None
        self._brand = None
        self._version = None
        self._model = None
        self._category = None
        self._initial_consumption = None
        self._country = None
        self._nav_system = None
        self._tanks = None
        self._tank_position = None
        self._technical = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if nav_system_object_uid is not None:
            self.nav_system_object_uid = nav_system_object_uid
        if release_year is not None:
            self.release_year = release_year
        if registration is not None:
            self.registration = registration
        if type is not None:
            self.type = type
        if brand is not None:
            self.brand = brand
        if version is not None:
            self.version = version
        if model is not None:
            self.model = model
        if category is not None:
            self.category = category
        if initial_consumption is not None:
            self.initial_consumption = initial_consumption
        if country is not None:
            self.country = country
        if nav_system is not None:
            self.nav_system = nav_system
        if tanks is not None:
            self.tanks = tanks
        if tank_position is not None:
            self.tank_position = tank_position
        if technical is not None:
            self.technical = technical

    @property
    def name(self):
        """Gets the name of this UpdateVehicleVehicle.  # noqa: E501


        :return: The name of this UpdateVehicleVehicle.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateVehicleVehicle.


        :param name: The name of this UpdateVehicleVehicle.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def nav_system_object_uid(self):
        """Gets the nav_system_object_uid of this UpdateVehicleVehicle.  # noqa: E501


        :return: The nav_system_object_uid of this UpdateVehicleVehicle.  # noqa: E501
        :rtype: str
        """
        return self._nav_system_object_uid

    @nav_system_object_uid.setter
    def nav_system_object_uid(self, nav_system_object_uid):
        """Sets the nav_system_object_uid of this UpdateVehicleVehicle.


        :param nav_system_object_uid: The nav_system_object_uid of this UpdateVehicleVehicle.  # noqa: E501
        :type: str
        """

        self._nav_system_object_uid = nav_system_object_uid

    @property
    def release_year(self):
        """Gets the release_year of this UpdateVehicleVehicle.  # noqa: E501


        :return: The release_year of this UpdateVehicleVehicle.  # noqa: E501
        :rtype: int
        """
        return self._release_year

    @release_year.setter
    def release_year(self, release_year):
        """Sets the release_year of this UpdateVehicleVehicle.


        :param release_year: The release_year of this UpdateVehicleVehicle.  # noqa: E501
        :type: int
        """

        self._release_year = release_year

    @property
    def registration(self):
        """Gets the registration of this UpdateVehicleVehicle.  # noqa: E501


        :return: The registration of this UpdateVehicleVehicle.  # noqa: E501
        :rtype: str
        """
        return self._registration

    @registration.setter
    def registration(self, registration):
        """Sets the registration of this UpdateVehicleVehicle.


        :param registration: The registration of this UpdateVehicleVehicle.  # noqa: E501
        :type: str
        """

        self._registration = registration

    @property
    def type(self):
        """Gets the type of this UpdateVehicleVehicle.  # noqa: E501


        :return: The type of this UpdateVehicleVehicle.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UpdateVehicleVehicle.


        :param type: The type of this UpdateVehicleVehicle.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def brand(self):
        """Gets the brand of this UpdateVehicleVehicle.  # noqa: E501


        :return: The brand of this UpdateVehicleVehicle.  # noqa: E501
        :rtype: int
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this UpdateVehicleVehicle.


        :param brand: The brand of this UpdateVehicleVehicle.  # noqa: E501
        :type: int
        """

        self._brand = brand

    @property
    def version(self):
        """Gets the version of this UpdateVehicleVehicle.  # noqa: E501


        :return: The version of this UpdateVehicleVehicle.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this UpdateVehicleVehicle.


        :param version: The version of this UpdateVehicleVehicle.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def model(self):
        """Gets the model of this UpdateVehicleVehicle.  # noqa: E501


        :return: The model of this UpdateVehicleVehicle.  # noqa: E501
        :rtype: int
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this UpdateVehicleVehicle.


        :param model: The model of this UpdateVehicleVehicle.  # noqa: E501
        :type: int
        """

        self._model = model

    @property
    def category(self):
        """Gets the category of this UpdateVehicleVehicle.  # noqa: E501


        :return: The category of this UpdateVehicleVehicle.  # noqa: E501
        :rtype: int
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this UpdateVehicleVehicle.


        :param category: The category of this UpdateVehicleVehicle.  # noqa: E501
        :type: int
        """

        self._category = category

    @property
    def initial_consumption(self):
        """Gets the initial_consumption of this UpdateVehicleVehicle.  # noqa: E501


        :return: The initial_consumption of this UpdateVehicleVehicle.  # noqa: E501
        :rtype: float
        """
        return self._initial_consumption

    @initial_consumption.setter
    def initial_consumption(self, initial_consumption):
        """Sets the initial_consumption of this UpdateVehicleVehicle.


        :param initial_consumption: The initial_consumption of this UpdateVehicleVehicle.  # noqa: E501
        :type: float
        """

        self._initial_consumption = initial_consumption

    @property
    def country(self):
        """Gets the country of this UpdateVehicleVehicle.  # noqa: E501


        :return: The country of this UpdateVehicleVehicle.  # noqa: E501
        :rtype: int
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this UpdateVehicleVehicle.


        :param country: The country of this UpdateVehicleVehicle.  # noqa: E501
        :type: int
        """

        self._country = country

    @property
    def nav_system(self):
        """Gets the nav_system of this UpdateVehicleVehicle.  # noqa: E501


        :return: The nav_system of this UpdateVehicleVehicle.  # noqa: E501
        :rtype: int
        """
        return self._nav_system

    @nav_system.setter
    def nav_system(self, nav_system):
        """Sets the nav_system of this UpdateVehicleVehicle.


        :param nav_system: The nav_system of this UpdateVehicleVehicle.  # noqa: E501
        :type: int
        """

        self._nav_system = nav_system

    @property
    def tanks(self):
        """Gets the tanks of this UpdateVehicleVehicle.  # noqa: E501


        :return: The tanks of this UpdateVehicleVehicle.  # noqa: E501
        :rtype: list[UpdateVehicleVehicleTanks]
        """
        return self._tanks

    @tanks.setter
    def tanks(self, tanks):
        """Sets the tanks of this UpdateVehicleVehicle.


        :param tanks: The tanks of this UpdateVehicleVehicle.  # noqa: E501
        :type: list[UpdateVehicleVehicleTanks]
        """

        self._tanks = tanks

    @property
    def tank_position(self):
        """Gets the tank_position of this UpdateVehicleVehicle.  # noqa: E501


        :return: The tank_position of this UpdateVehicleVehicle.  # noqa: E501
        :rtype: int
        """
        return self._tank_position

    @tank_position.setter
    def tank_position(self, tank_position):
        """Sets the tank_position of this UpdateVehicleVehicle.


        :param tank_position: The tank_position of this UpdateVehicleVehicle.  # noqa: E501
        :type: int
        """

        self._tank_position = tank_position

    @property
    def technical(self):
        """Gets the technical of this UpdateVehicleVehicle.  # noqa: E501


        :return: The technical of this UpdateVehicleVehicle.  # noqa: E501
        :rtype: int
        """
        return self._technical

    @technical.setter
    def technical(self, technical):
        """Sets the technical of this UpdateVehicleVehicle.


        :param technical: The technical of this UpdateVehicleVehicle.  # noqa: E501
        :type: int
        """

        self._technical = technical

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateVehicleVehicle, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateVehicleVehicle):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
